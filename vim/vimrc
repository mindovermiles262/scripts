syntax on

" set autoindent
set number
set numberwidth=3

" Set Ruler
set colorcolumn=79
highlight ColorColumn ctermbg=233 

set showcmd
set showmode
set backspace=indent,eol,start

" Key remapping
:imap jj <Esc>
:map :qq :q!

" Set TAB to 2 Spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set smarttab
set autoindent
set smartindent

" Autoclose brackets
inoremap (<CR> (<CR>)<C-c>O<TAB>
inoremap {<CR> {<CR>}<C-c>O<TAB>
inoremap [<CR> [<CR>]<C-c>O<TAB>
inoremap (;<CR> (<CR>);<C-c>O<TAB>
inoremap {;<CR> {<CR>};<C-c>O<TAB>
inoremap [;<CR> [<CR>];<C-c>O<TAB>

" Syntastic Linter Settings
" https://github.com/vim-syntastic/syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_go_checkers = ["go"]
let g:syntastic_javascript_checkers = ["eslint"]
let g:syntastic_javascript_eslint_exe='$(npm bin)/eslint'
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_ruby_checkers = ['rubocop']
" Use '\sc' to check syntax
nmap <leader>sc :SyntasticCheck<CR> 
nmap <leader>si :SyntasticInfo<CR>

" Avro Schema (.avsc) files are JSON
autocmd BufRead,BufNewFile *.avsc setlocal filetype=json

" Golang
let g:go_def_mode="gopls"
let g:go_info_mode="gopls"

" Emmet Vim
" let g:user_emmet_leader_key='<C-Z>'
let g:user_emmet_expandabbr_key='<C-e>'
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

# File Location: ~/.bash_profile
# Run the following to download and initialize:
# curl -o ~/.bash_profile https://raw.githubusercontent.com/mindovermiles262/scripts/master/bash/bash_profile && source ~/.bash_profile

BASH_PROFILE_URL="https://raw.githubusercontent.com/mindovermiles262/scripts/master/bash/bash_profile"


# Load settings from .bashrc
[[ -r ~/.bashrc ]] && . ~/.bashrc

if [ -f "~/Documents/bash-command-timer/bash_command_timer.sh" ]; then
  source ~/Documents/bash-command-timer/bash_command_timer.sh
fi

# OS Specific Commands
if [[ "$OSTYPE" == 'linux'* ]]; then
  alias open="xdg-open"
elif [[ "$OSTYPE" =~ "darwin" ]]; then
  export CLICOLOR=1
  export LSCOLORS=GxFxCxDxBxegedabagaced
  alias unmount="diskutil unmountDisk $1"
  alias eject="diskutil unmountDisk $1"
  export BASH_SILENCE_DEPRECATION_WARNING=1
fi

# Add color to Terminal:
export PS1='\[\033[1;32m\]\u \[\033[1;00m\](\D{%T}) \[\033[1;34m\][\w]\[\033[1;33m\]$(parse_git_branch) \[\033[1;31m\]$(k8s_current_context)\[\033[00m\]\n\$\[\033[8m\]â€¢\[\033[00m\]'

# Get first 4 letters of hostname and upcase
hostname_displ() {
  # HOST="$(hostname | head -c 4)"
  HOST="$(hostname)"
  # echo $HOST | tr '[:lower:]' '[:upper:]'
  echo $HOST | tr '[:upper:]' '[:lower:]'
}

# Git branch in terminal.
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# Returns current K8S context
function k8s_current_context() {
  if [ -f "$HOME/.kube/config" ]; then
    CURRENT_CONTEXT=$(grep "current-context" "$HOME/.kube/config" | cut -d" " -f2)
    echo "[$CURRENT_CONTEXT]"
  fi
}

dslr() {
  if [ -n "$1" ]
  then
    DEVICE="$1"
  else
    DEVICE="/dev/video4"
  fi
  gphoto2 --stdout --capture-movie | ffmpeg -i - -vcodec rawvideo -pix_fmt yuv420p -threads 0 -f v4l2 $DEVICE
}

dslr-reset() {
  gphoto2 --stdout --capture-movie > /dev/null
}

###########
# Aliases #
###########

# File Aliases
if [[ "$OSTYPE" == 'linux'* ]]; then
  alias l="/bin/ls -lh --color"
  alias ls="/bin/ls -h --color"
  alias ll="/bin/ls -lha --color"
  alias la="/bin/ls -ha --color"
else
  alias l="/bin/ls -lhG"
  alias ls="/bin/ls -hG"
  alias ll="/bin/ls -lhaG"
  alias la="/bin/ls -haG"
fi

# Git Aliases
alias gss="git status"
alias gaa="git add ."
alias gcc="git commit -m '$@'"
alias gph="git push origin HEAD"
alias gc='git commit -am "$(date)"'


# Work
alias st="cd ~/storable && ls -lGh"
alias std="cd ~/storable/devops && ls -lGh"
alias stm="cd ~/storable/sparefoot && ls -lGh"
alias sta="cd ~/storable/access && ls -lGh"
alias stp="cd ~/storable/polaris && ls -lGh"
export AP="storable-access-astria-porta"
export FS="storable-polaris-facility-service"
export TS="storable-polaris-tenant-service"
export CS="storable-polaris-cowsay"
export SLP="storable-sitelink-palantir"
export SLS="storable-sitelink-slapipals"
export ES="external-secrets"
export SSO="storable-polaris-sso-service"
export TW="storable-toast-toast-web"
export TA="storable-toast-toast-api"
export SLIP="storable-sitelink-insurance-processor"

# Program Aliases
alias tf="terraform $@"
alias tplan="terraform plan -out out.plan $@"
alias mk="minikube $@"
alias dc="docker-compose $@"
export DOCKER_BUILDKIT=0
alias gc="gcloud $@"
alias ta="tmux attach -t $1"
alias tls="tmux ls"
alias gc="gcloud $@"
alias mks="microk8s $@"
alias kls="kubectl config get-contexts"
alias kuse="kubectl config use-context $1"
export KUBE_EDITOR=vim
alias dn="dotnet $@"

# Random Aliases
alias cip="curl https://andyduss.com/ip"
alias lip="ifconfig | grep 'inet '"
alias \:q="exit"
alias c="cd .."

ks() {
  if [[ -f "/snap/bin/microk8s" ]]; then
    microk8s.kubectl "$@"
  else
    kubectl "$@"
  fi
}


tada() {
  # Check if tmux is installed
  if [[ ! -f "/usr/local/bin/tmux" && ! -f "/usr/bin/tmux" ]]; then
    echo "Tmux not found.. exiting..."
    return 1
  fi

  tmux ls | grep -q dflt
  CPE_EXITCODE=$?
  if [[ "$CPE_EXITCODE" -eq 0 ]]; then
    # 0 => Session is running, attach to existing session
    echo "Attaching to 'dflt' session . . ."
    tmux attach -t dflt
  else
    # 1 => Session does not exist, create new session
    echo "Creating new tmux session, 'dflt' . . ."
    tmux new -s dflt
  fi
}

preprod_admin () {
    aws sso login --profile sso-st-preprod-admin
}

jwt-ap-dev() {
    dotnet run \
      --project ~/storable/polaris/jwt-generation-util/src/Storable.Polaris.JwtGenerationUtil \
      --private-key ~/.storable/storable-developer-local.pem \
      --issuer Storable.Developer.Local \
      --kid storable
}

tf-check() {
  docker run --rm -it -v $(pwd):/lint -w /lint ghcr.io/antonbabenko/pre-commit-terraform:latest run --all-files
}

tf-doc() {
  pre-commit run --show-diff-on-failure --all-files terraform_docs
}

fpush() {
    git add . && git commit -sm "$(date)" && git push origin HEAD
}

# Use bash-completion
if [ -f "/usr/local/etc/profile.d/bash_completion.sh" ]; then
  . /usr/local/etc/profile.d/bash_completion.sh
fi

# Add asdf to PATH
if [ -d "$HOME/.asdf" ]; then
  . $HOME/.asdf/asdf.sh
  export PATH=$PATH:$HOME/.asdf/shims
fi

# Add pyenv to PATH
if [ -d "$HOME/.pyenv" ]; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
fi

# Add rbenv to PATH
if [ -d "$HOME/.rbenv" ]; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi

# Add golang to PATH
if [ -d "/usr/local/go" ]; then
  export PATH="$PATH:/usr/local/go/bin"
fi

if [ -d "$HOME/code/go" ]; then
  export GOPATH="$HOME/code/go"
  export PATH="$PATH:$GOPATH/bin"
fi

# Add Istio to PATH
if [ -d "$HOME/Applications/istio" ]; then
  export PATH="$PATH:$HOME/Applications/istio/bin"
fi

if [ -d "$HOME/.istioctl" ]; then
  export PATH="$PATH:$HOME/.istioctl/bin"
fi

# Add gcloud to PATH
if [ -d "$HOME/Applications/google-cloud-sdk" ]; then
  export PATH="$PATH:$HOME/Applications/google-cloud-sdk/bin"
fi

# Use MySQL from brew
if [ -d "/usr/local/opt/mysql-client" ]; then
  export PATH="/usr/local/opt/mysql-client/bin:$PATH"
fi

if [ -d "$HOME/.dotnet/tools" ]; then
  export PATH="$PATH:$HOME/.dotnet/tools"
fi

if [ -d "$HOME/Applications/kafka" ]; then
  export PATH="$PATH:$HOME/Applications/kafka/bin"
  export CLASSPATH="$HOME/Applications/kafka/bin/aws-msk-iam-auth-1.1.4-all.jar"
fi

source /Users/aduss/.docker/init-bash.sh || true # Added by Docker Desktop

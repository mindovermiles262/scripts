#
# Profile stuff that is not shell-specific
#

# Source Storable Stuff
if [ -f "$HOME/.storable-profile" ]; then
  . "$HOME/.storable-profile"
fi

# Source sensitive environment variables
if [ -f "$HOME/.authorizations" ]; then
  . "$HOME/.authorizations"  
fi

# OS Specific Commands
if [[ "$OSTYPE" == 'linux'* ]]; then
  alias open="xdg-open"
elif [[ "$OSTYPE" =~ "darwin" ]]; then
  export CLICOLOR=1
  export LSCOLORS=GxFxCxDxBxegedabagaced
  alias unmount="diskutil unmountDisk $1"
  alias eject="diskutil unmountDisk $1"
  export BASH_SILENCE_DEPRECATION_WARNING=1
fi

###########
# Aliases #
###########

# File Aliases
if [[ "$OSTYPE" == 'linux'* ]]; then
  alias l="/bin/ls -lh --color"
  alias ls="/bin/ls -h --color"
  alias ll="/bin/ls -lha --color"
  alias la="/bin/ls -ha --color"
else
  alias l="/bin/ls -lhG"
  alias ls="/bin/ls -hG"
  alias ll="/bin/ls -lhaG"
  alias la="/bin/ls -haG"
fi

# Git Aliases
alias gss="git status"
alias gs="git status"
alias gaa="git add ."
alias ga="git add ."
alias gcc="git commit -sm $@"
alias gc="git commit -sm $@"
alias gph="git push origin HEAD"
alias gp="git push origin HEAD"

# Program Aliases
alias tf="terraform $@"
alias tplan="terraform plan -out out.plan $@"
alias mk="minikube $@"
alias dc="docker-compose $@"
alias gc="gcloud $@"
alias ta="tmux attach -t $1"
alias tls="tmux ls"
alias gc="gcloud $@"
alias mks="microk8s $@"
alias kls="kubectl config get-contexts"
alias kuse="kubectl config use-context $1"
export KUBE_EDITOR=vim
alias dn="dotnet $@"
alias kn="kubens $@"
alias pm="podman $@"

# Random Aliases
alias cip="curl https://andyduss.com/ip"
alias lip="ifconfig | grep 'inet '"
alias \:q="exit"
alias c="cd .."

ks() {
  if [[ -f "/snap/bin/microk8s" ]]; then
    microk8s.kubectl "$@"
  else
    kubectl "$@"
  fi
}

tada() {
  # Check if tmux is installed
  if [[ ! -f "/usr/local/bin/tmux" && ! -f "/usr/bin/tmux" && ! -f "/opt/homebrew/bin/tmux" ]]; then
    echo "Tmux not found.. exiting..."
    return 1
  fi

  tmux ls | grep -q dflt
  CPE_EXITCODE=$?
  if [[ "$CPE_EXITCODE" -eq 0 ]]; then
    # 0 => Session is running, attach to existing session
    echo "Attaching to 'dflt' session . . ."
    tmux attach -t dflt
  else
    # 1 => Session does not exist, create new session
    echo "Creating new tmux session, 'dflt' . . ."
    tmux new -s dflt
  fi
}

tm() {
  if [ $# -eq 0 ]; then
    tmux ls
  else
    tmux ls | grep -q $1
    CPE_EXITCODE=$?
    if [[ "$CPE_EXITCODE" -eq 0 ]]; then
      # 0 => Session is running, attach to existing session
      echo "Attaching to '$1' session ..."
      tmux attach -t $1
    else
      # 1 => Session does not exist, create new session
      echo "Creating new tmux session, $1 ..."
      tmux new -s $1
    fi
  fi
}

tf-check() {
  docker run --rm -it -v $(pwd):/lint -w /lint ghcr.io/antonbabenko/pre-commit-terraform:latest run --all-files
}

tf-doc() {
  pre-commit run --show-diff-on-failure --all-files terraform_docs
}

fpush() {
    git add . && git commit -sm "$(date)" && git push origin HEAD
}

fffpush() {
    printf "\n" >> README.md && git add . && git commit -m "$(date)" && git push origin HEAD
}

b64() {
    echo $1 | base64 -d
}

gfeat() {
    git add . && git commit -sm "feat: $1"
}

gfix() {
    git add . && git commit -sm "fix: $1"
}

gchore() {
    git add . && git commit -sm "chore: $1"
}

# Returns current K8S context
function k8s_current_context() {
  if [ -f "$HOME/.kube/config" ]; then
    CURRENT_CONTEXT=$(grep "current-context" "$HOME/.kube/config" | cut -d" " -f2)
    echo "$CURRENT_CONTEXT"
  fi
}

# Returns kubenvs namespace of current context
function k8s_current_namespace() {
  export CURRENT_CONTEXT=$(grep "current-context" "$HOME/.kube/config" | cut -d" " -f2)
  NS=$(yq '.contexts[] | select(.context.cluster == env(CURRENT_CONTEXT)).context.namespace' ~/.kube/config)
  if [[ "$NS" == "null" ]]; then echo ""; else echo " $NS"; fi
}

function k8s_prompt() {
  CONTEXT=$(k8s_current_context)
  NAMESPACE=$(k8s_current_namespace)
  if [[ $NAMESPACE == "null" ]]; then NAMESPACE=""; fi;
  echo "[$CONTEXT$NAMESPACE]"
}

# Add homebrew to path
if [ "$(arch)" = "arm64" ]; then
  # ARM Homebrew (Apple Mx chip)
  eval "$(/opt/homebrew/bin/brew shellenv)"
else
  # Rosetta Terminal Homebrew (Intel chip)
  eval "$(/usr/local/homebrew/bin/brew shellenv)"
  alias ibrew="arch -x86_64 /usr/local/bin/brew"
  # https://github.com/rails/rails/issues/38560
  export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
  export DISABLE_SPRING=true
fi


# Use bash-completion
if [ -f "/usr/local/etc/profile.d/bash_completion.sh" ]; then
  . /usr/local/etc/profile.d/bash_completion.sh
fi

# Add asdf to PATH
if [ -d "$HOME/.asdf" ]; then
  . $HOME/.asdf/asdf.sh
  export PATH=$PATH:$HOME/.asdf/shims
fi

# Add pyenv to PATH
if [ -d "$HOME/.pyenv" ]; then
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
fi

# Add rbenv to PATH
if [ -d "$HOME/.rbenv" ]; then
  export PATH="$PATH:$HOME/.rbenv/bin"
  eval "$(rbenv init -)"
fi

# Add golang to PATH
if [ -d "/usr/local/go" ]; then
  export PATH="$PATH:/usr/local/go/bin"
fi

if [ -d "$HOME/code/go" ]; then
  export GOPATH="$HOME/code/go"
  export PATH="$PATH:$GOPATH/bin"
fi

# Add Istio to PATH
if [ -d "$HOME/Applications/istio" ]; then
  export PATH="$PATH:$HOME/Applications/istio/bin"
fi

if [ -d "$HOME/.istioctl" ]; then
  export PATH="$PATH:$HOME/.istioctl/bin"
fi

# Add gcloud to PATH
if [ -d "$HOME/Applications/google-cloud-sdk" ]; then
  export PATH="$PATH:$HOME/Applications/google-cloud-sdk/bin"
fi

# Use MySQL from brew
if [ -d "/usr/local/opt/mysql-client" ]; then
  export PATH="/usr/local/opt/mysql-client/bin:$PATH"
fi

# Add dotnet to PATH
if [ -d "$HOME/.dotnet/tools" ]; then
  export PATH="$PATH:$HOME/.dotnet/tools"
fi

# Add Kafka to PATH
if [ -d "$HOME/Applications/kafka" ]; then
  export PATH="$PATH:$HOME/Applications/kafka/bin"
  export CLASSPATH="$HOME/Applications/kafka/bin/aws-msk-iam-auth-1.1.4-all.jar"
fi

if [ -d "$HOME/.linkerd2/bin" ]; then
  export PATH=$PATH:$HOME/.linkerd2/bin
fi

# Add Docker completion to bash
if [ -f "$HOME/.docker/init-bash.sh" ]; then
  source "$HOME/.docker/init-bash.sh"
fi

# Add timer to bash
if [ -f "~/Documents/bash-command-timer/bash_command_timer.sh" ]; then
  source ~/Documents/bash-command-timer/bash_command_timer.sh
fi


# Add Applications bin to PATH
if [ -d "$HOME/Applications/bin" ]; then
  export PATH="$PATH:$HOME/Applications/bin"
fi


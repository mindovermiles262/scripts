#
# Profile stuff that is not shell-specific
#

# Source Work Stuff
if [ -f "$HOME/.work_profile" ]; then
  . "$HOME/.work_profile"
fi

# Source sensitive environment variables
if [ -f "$HOME/.authorizations" ]; then
  . "$HOME/.authorizations"  
fi

# OS Specific Commands
if [[ "$OSTYPE" == 'linux'* ]]; then
  alias open="xdg-open"
  watts() {
    BATTERY=${1:-0}
    uWATT=$(cat /sys/class/power_supply/BAT$BATTERY/power_now)
    WATTS=$(echo "$uWATT*0.000001" | bc -l)
    printf "Battery $BATTERY is using %.2f Watts\n" $WATTS
  }
elif [[ "$OSTYPE" =~ "darwin" ]]; then
  export CLICOLOR=1
  export LSCOLORS=GxFxCxDxBxegedabagaced
  alias unmount="diskutil unmountDisk $1"
  alias eject="diskutil unmountDisk $1"
fi

###########
# Aliases #
###########

# File Aliases
if [[ "$OSTYPE" == 'linux'* ]]; then
  alias l="/bin/ls -lh --color"
  alias ls="/bin/ls -h --color"
  alias ll="/bin/ls -lha --color"
  alias la="/bin/ls -ha --color"
else
  alias l="/bin/ls -lhG"
  alias ls="/bin/ls -hG"
  alias ll="/bin/ls -lhaG"
  alias la="/bin/ls -haG"
fi

# Git Aliases
alias gss="git status"
alias gs="git status"
alias gaa="git add ."
alias ga="git add ."
alias gcc="git commit -sm $@"
alias gc="git commit -sm $@"
alias gph="git push origin HEAD"
alias gp="git push origin HEAD"

# Program Aliases
alias tf="terraform $@"
alias tplan="terraform plan -out out.plan $@"
alias dc="docker-compose $@"
alias gc="gcloud $@"
alias ta="tmux attach -t $1"
alias tls="tmux ls"
alias mk="minikube $@"
alias kls="kubectl config get-contexts"
alias kuse="kubectl config use-context $1"
alias ks="kubectl $@"
export KUBE_EDITOR=vim
alias kn="kubens $@"
alias p="pnpm $@"

# Helpful Aliases
alias cip="curl https://andrewduss.com/ip"
alias lip="ifconfig | grep 'inet '"
alias \:q="exit"
alias c="cd .."

tada() {
  # Check if tmux is installed
  if [[ ! -f "/usr/local/bin/tmux" && ! -f "/usr/bin/tmux" && ! -f "/opt/homebrew/bin/tmux" ]]; then
    echo "Tmux not found.. exiting..."
    return 1
  fi

  tmux ls | grep -q dflt
  CPE_EXITCODE=$?
  if [[ "$CPE_EXITCODE" -eq 0 ]]; then
    # 0 => Session is running, attach to existing session
    echo "Attaching to 'dflt' session . . ."
    tmux attach -t dflt
  else
    # 1 => Session does not exist, create new session
    echo "Creating new tmux session, 'dflt' . . ."
    tmux new -s dflt -c $HOME
  fi
}

tm() {
  if [ $# -eq 0 ]; then
    tmux ls
  else
    tmux ls | grep -q $1
    CPE_EXITCODE=$?
    if [[ "$CPE_EXITCODE" -eq 0 ]]; then
      # 0 => Session is running, attach to existing session
      echo "Attaching to '$1' session ..."
      tmux attach -t $1
    else
      # 1 => Session does not exist, create new session
      echo "Creating new tmux session, $1 ..."
      tmux new -s $1
    fi
  fi
}

fpush() {
    git add . && git commit -sm "$(date)" && git push origin HEAD
}

fffpush() {
    printf "\n" >> README.md && git add . && git commit -m "$(date)" && git push origin HEAD
}

b64() {
    echo $1 | base64 -d
}

gfeat() {
    git add . && git commit -sm "feat: $1"
}

gfix() {
    git add . && git commit -sm "fix: $1"
}

gchore() {
    git add . && git commit -sm "chore: $1"
}

# Returns current K8S context
function k8s_current_context() {
  if [ -f "$HOME/.kube/config" ]; then
    CURRENT_CONTEXT=$(grep "current-context" "$HOME/.kube/config" | cut -d" " -f2)
    echo "$CURRENT_CONTEXT"
  fi
}

# Returns kubenvs namespace of current context
function k8s_current_namespace() {
  export CURRENT_CONTEXT=$(grep "current-context" "$HOME/.kube/config" | cut -d" " -f2)
  NS=$(yq '.contexts[] | select(.context.cluster == env(CURRENT_CONTEXT)).context.namespace' ~/.kube/config)
  if [[ "$NS" == "null" ]]; then echo ""; else echo " $NS"; fi
}

function k8s_prompt() {
  CONTEXT=$(k8s_current_context)
  # NAMESPACE=$(k8s_current_namespace)
  # if [[ $NAMESPACE == "null" ]]; then NAMESPACE=""; fi;
  # echo "[$CONTEXT$NAMESPACE]"
  echo "[$CONTEXT]"
}

# Add homebrew to path
if [ -d "/opt/homebrew" ]; then
  # ARM Homebrew (Apple Mx chip)
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Use bash-completion
if [ -f "/usr/local/etc/profile.d/bash_completion.sh" ]; then
  . /usr/local/etc/profile.d/bash_completion.sh
fi

# Add asdf to PATH
if [ -d "$HOME/.asdf" ]; then
  . $HOME/.asdf/asdf.sh
  export PATH=$PATH:$HOME/.asdf/shims
fi

# Add mise-en-place to PATH
if [ -d "$HOME/.local/share/mise/shims" ]; then
  export PATH="$HOME/.local/share/mise/shims:$PATH"
fi

if [ -d "$HOME/.local/bin" ]; then
  export PATH="$HOME/.local/bin:$PATH"
fi


# Use MySQL from brew
if [ -d "/usr/local/opt/mysql-client" ]; then
  export PATH="/usr/local/opt/mysql-client/bin:$PATH"
fi

# Add Docker completion to bash
if [ -f "$HOME/.docker/init-bash.sh" ]; then
  source "$HOME/.docker/init-bash.sh"
fi

# Add timer to bash
if [ -f "~/Documents/bash-command-timer/bash_command_timer.sh" ]; then
  source ~/Documents/bash-command-timer/bash_command_timer.sh
fi

# Add Applications bin to PATH
if [ -d "$HOME/Applications/bin" ]; then
  export PATH="$PATH:$HOME/Applications/bin"
fi

# All libpq brew to path
if [ -d "/opt/homebrew/opt/libpq/bin" ]; then
  export PATH="/opt/homebrew/opt/libpq/bin:$PATH"
fi

# Add pnpm to path
if [ -d "$HOME/Library/pnpm" ]; then
  export PNPM_HOME="$HOME/Library/pnpm"
  export PATH="$HOME/Library/pnpm:$PATH"
fi

# Ctrl-D does not exit terminal
set -o ignoreeof  # Same as setting IGNOREEOF=10
